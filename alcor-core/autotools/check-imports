


"""Script to check module imports.

"""


import sys

_STANDARD_MODULES = set(sys.modules.keys())

import os.path

from alcor import build


def main():
  args = sys.argv[1:]

  # Get references to functions used later on
  load_module = build.LoadModule
  abspath = os.path.abspath
  commonprefix = os.path.commonprefix
  normpath = os.path.normpath

  script_path = abspath(__file__)
  srcdir = normpath(abspath(args.pop(0)))

  assert "alcor" in sys.modules

  for filename in args:
    # Reset global state
    modules_to_remove = []

    for name in sys.modules:
      if name not in _STANDARD_MODULES:
        modules_to_remove.append(name)

    for name in modules_to_remove:
      sys.modules.pop(name, None)

    assert "alcor" not in sys.modules

    # Load module (this might import other modules)
    module = load_module(filename)

    result = []

    for (name, checkmod) in sorted(sys.modules.items()):
      if checkmod is None or checkmod == module:
        continue

      try:
        checkmodpath = getattr(checkmod, "__file__")
      except AttributeError:
        # Built-in module
        continue

      if checkmodpath is None and hasattr(checkmod, "__path__"):
        # Namespace module
        continue

      abscheckmodpath = os.path.abspath(checkmodpath)

      if abscheckmodpath == script_path:
        # Ignore check script
        continue

      if commonprefix([abscheckmodpath, srcdir]) == srcdir:
        result.append(name)

    if result:
      raise Exception("Module '%s' has illegal imports: %s" %
                      (filename, ", ".join(result)))


if __name__ == "__main__":
  main()
